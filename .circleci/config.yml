version: 2.0
jobs:
  BuildPushMaster:
    docker:
      - image: circleci/node
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build and Push to ACR
          command: |
            echo APP_ENV=${APP_ENV} >> .env
            echo APP_DEBUG=${APP_DEBUG} >> .env
            echo APP_KEY=${APP_KEY} >> .env
            echo APP_URL=${APP_URL} >> .env
            echo DEV_SQLSRV_HOST=${DEV_SQLSRV_HOST} >> .env
            echo DEV_SQLSRV_DATABASE=${DEV_SQLSRV_DATABASE} >> .env
            echo DEV_SQLSRV_USERNAME=${DEV_SQLSRV_USERNAME} >> .env
            echo DEV_SQLSRV_PASSWORD=${DEV_SQLSRV_PASSWORD} >> .env
            echo SQLSRV_HOST=${SQLSRV_HOST} >> .env
            echo SQLSRV_DATABASE=${SQLSRV_DATABASE} >> .env
            echo SQLSRV_USERNAME=${SQLSRV_USERNAME} >> .env
            echo SQLSRV_PASSWORD=${SQLSRV_PASSWORD} >> .env
            echo CACHE_DRIVER=${CACHE_DRIVER} >> .env
            echo SESSION_DRIVER=${SESSION_DRIVER} >> .env
            echo QUEUE_DRIVER=${QUEUE_DRIVER} >> .env
            echo MAIL_DRIVER=${MAIL_DRIVER} >> .env
            echo MAIL_HOST=${MAIL_HOST} >> .env
            echo MAIL_PORT=${MAIL_PORT} >> .env
            echo DB_HOST=${DB_HOST} >> .env
            echo DB_PORT=${DB_PORT} >> .env
            echo DB_DATABASE=${DB_DATABASE} >> .env
            echo DB_USERNAME=${DB_USERNAME} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo -e "text\n" >> .env
            echo DB_DATABASE=${DB_DATABASE} >> ./db_stuff/.env
            echo DB_USERNAME=${DB_USERNAME} >> ./db_stuff/.env
            echo DB_PASSWORD=${DB_PASSWORD} >> ./db_stuff/.env
            echo LEGACY_USER=${LEGACY_USER} >> ./db_stuff/.env
            echo LEGACY_PW=${LEGACY_PW} >> ./db_stuff/.env
            echo LEGACY_HOST=${LEGACY_HOST} >> ./db_stuff/.env
            echo LEGACY_PORT=${LEGACY_PORT} >> ./db_stuff/.env
            echo -e "text\n" >> ./db_stuff/.env
            docker build . -t ${registryName}.azurecr.io/${frontImageLatest}
            docker build ./db_stuff -t ${registryName}.azurecr.io/${seedsImageLatest}
            docker build ./admin -t ${registryName}.azurecr.io/${adminImage}
            docker login ${registryName}.azurecr.io -u ${registryName} -p ${registryPassword}
            docker push ${registryName}.azurecr.io/${frontImageLatest}
            docker push ${registryName}.azurecr.io/${seedsImageLatest}
            docker push ${registryName}.azurecr.io/${adminImage}
  BuildPushDev:
    docker:
      - image: circleci/node
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build and Push to ACR
          command: |
            echo APP_ENV=${APP_ENV} >> .env
            echo APP_DEBUG=${APP_DEBUG} >> .env
            echo APP_KEY=${APP_KEY} >> .env
            echo APP_URL=${APP_URL} >> .env
            echo DEV_SQLSRV_HOST=${DEV_SQLSRV_HOST} >> .env
            echo DEV_SQLSRV_DATABASE=${DEV_SQLSRV_DATABASE} >> .env
            echo DEV_SQLSRV_USERNAME=${DEV_SQLSRV_USERNAME} >> .env
            echo DEV_SQLSRV_PASSWORD=${DEV_SQLSRV_PASSWORD} >> .env
            echo SQLSRV_HOST=${SQLSRV_HOST} >> .env
            echo SQLSRV_DATABASE=${SQLSRV_DATABASE} >> .env
            echo SQLSRV_USERNAME=${SQLSRV_USERNAME} >> .env
            echo SQLSRV_PASSWORD=${SQLSRV_PASSWORD} >> .env
            echo CACHE_DRIVER=${CACHE_DRIVER} >> .env
            echo SESSION_DRIVER=${SESSION_DRIVER} >> .env
            echo QUEUE_DRIVER=${QUEUE_DRIVER} >> .env
            echo MAIL_DRIVER=${MAIL_DRIVER} >> .env
            echo MAIL_HOST=${MAIL_HOST} >> .env
            echo MAIL_PORT=${MAIL_PORT} >> .env
            echo DB_HOST=${DB_HOST} >> .env
            echo DB_PORT=${DB_PORT} >> .env
            echo DB_DATABASE=${DB_DATABASE} >> .env
            echo DB_USERNAME=${DB_USERNAME} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo -e "text\n" >> .env
            echo DB_DATABASE=${DB_DATABASE} >> ./db_stuff/.env
            echo DB_USERNAME=${DB_USERNAME} >> ./db_stuff/.env
            echo DB_PASSWORD=${DB_PASSWORD} >> ./db_stuff/.env
            echo LEGACY_USER=${LEGACY_USER} >> ./db_stuff/.env
            echo LEGACY_PW=${LEGACY_PW} >> ./db_stuff/.env
            echo LEGACY_HOST=${LEGACY_HOST} >> ./db_stuff/.env
            echo LEGACY_PORT=${LEGACY_PORT} >> ./db_stuff/.env
            echo -e "text\n" >> ./db_stuff/.env
            docker build . -t ${registryName}.azurecr.io/${frontImageDev}
            docker build ./db_stuff -t ${registryName}.azurecr.io/${seedsImageDev}
            docker build ./admin -t ${registryName}.azurecr.io/${adminImage}
            docker login ${registryName}.azurecr.io -u ${registryName} -p ${registryPassword}
            docker push ${registryName}.azurecr.io/${frontImageDev}
            docker push ${registryName}.azurecr.io/${seedsImageDev}
            docker push ${registryName}.azurecr.io/${adminImage}
workflows:
  version: 2
  WMVP_Workflow:
    jobs:
      - BuildPushMaster:
          filters:
            branches:
              only: master
      - BuildPushDev:
          filters:
            branches:
              only: dev