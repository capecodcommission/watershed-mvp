apiVersion: v1
items:

# # wmvp dev deployment
# - apiVersion: apps/v1
#   kind: Deployment
#   metadata:
#     name: wmvpdevdeploy
#     namespace: ccc
#     labels:
#       keel.sh/policy: force
#       keel.sh/match-tag: "true"
#       app: wmvpfrontdev
#   spec:
#     selector:
#       matchLabels:
#         app: wmvpfrontdev
#     replicas: 1 # tells deployment to run 3 pods matching the template
#     revisionHistoryLimit: 1
#     strategy: {}
#     template:
#       metadata:
#         labels:
#           app: wmvpfrontdev
#       spec:
#         containers:
#         - name: wmvp-dev
#           image: ccccontainers.azurecr.io/wmvp:dev
#           imagePullPolicy: Always
#           ports:
#           - name: "wmvp-dev-port"
#             containerPort: 80
#             protocol: TCP
#           resources: {}
#         restartPolicy: Always
#   status: {}

# # wmvp dev service
# - apiVersion: v1 # for versions before 1.9.0 use apps/v1beta2
#   kind: Service
#   metadata:
#       name: wmvpdevsvc
#       namespace: ccc
#   spec:
#     type: LoadBalancer
#     selector:
#         app: wmvpfrontdev
#     ports:
#       - name: "wmvp-dev-80"
#         port: 80
#         targetPort: 80
#         protocol: TCP

# wmvp prod deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: wmvpdeploy
    namespace: ccc
    labels:
      keel.sh/policy: force
      keel.sh/match-tag: "true"
      app: wmvpfront
  spec:
    selector:
      matchLabels:
        app: wmvpfront
    replicas: 3 # tells deployment to run 3 pods matching the template
    revisionHistoryLimit: 1
    strategy: {}
    template:
      metadata:
        labels:
          app: wmvpfront
      spec:
        containers:
        - name: wmvpfront
          image: ccccontainers.azurecr.io/wmvp:latest
          imagePullPolicy: Always
          ports:
          - name: "wmvp-port"
            containerPort: 80
            protocol: TCP
          resources: {}
        restartPolicy: Always
  status: {}

# wmvp prod service
- apiVersion: v1 # for versions before 1.9.0 use apps/v1beta2
  kind: Service
  metadata:
      name: wmvpsvc
      namespace: ccc
  spec:
    type: LoadBalancer
    selector:
        app: wmvpfront
    ports:
      - name: "wmvp-latest-80"
        port: 80
        targetPort: 80
        protocol: TCP

# CCC INGRESS RESOURCE
- apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    name: ccc-ingress
    namespace: ccc
    annotations:
      kubernetes.io/ingress.class: nginx
      # certmanager.k8s.io/cluster-issuer: letsencrypt-staging
      certmanager.k8s.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/rewrite-target: /
  spec:
    tls:
    - hosts:
      - www.capecodcoast.org
      # secretName: cccpsvc-staging-cert
      secretName: cccpsvc-prod-cert
    - hosts:
      - uat.capecodcoast.org
      # secretName: cccpuatsvc-staging-cert
      secretName: cccpuatsvc-prod-cert
    - hosts:
      - dev.capecodcoast.org
      # secretName: cccpdevsvc-staging-cert
      secretName: cccpdevsvc-prod-cert
    - hosts:
      - dev.watershedmvp.org
      # secretName: wmvpdevsvc-staging-cert
      secretName: wmvpdevsvc-prod-cert
    - hosts:
      - www.watershedmvp.org
      # secretName: wmvpdevsvc-staging-cert
      secretName: wmvpsvc-prod-cert
    - hosts:
      - slrv.apps.capecodcommission.org
      # secretName: slrvsvc-staging-cert
      secretName: slrvsvc-prod-cert
    - hosts:
      - uat.slrv.apps.capecodcommission.org
      # secretName: slrvuatsvc-staging-cert
      secretName: slrvuatsvc-prod-cert
    - hosts:
      - dev.slrv.apps.capecodcommission.org
      # secretName: slrvdevsvc-staging-cert
      secretName: slrvdevsvc-prod-cert
    rules:
    - host: www.capecodcoast.org
      http:
        paths:
        - path: /
          backend:
            serviceName: cccpsvc
            servicePort: 80
    - host: uat.capecodcoast.org
      http:
        paths:
        - path: /
          backend:
            serviceName: cccpuatsvc
            servicePort: 80
    - host: dev.capecodcoast.org
      http:
        paths:
        - path: /
          backend:
            serviceName: cccpdevsvc
            servicePort: 80
    - host: dev.watershedmvp.org
      http:
        paths:
        - path: /
          backend:
            serviceName: wmvpdevsvc
            servicePort: 80
    - host: www.watershedmvp.org
      http:
        paths:
        - path: /
          backend:
            serviceName: wmvpsvc
            servicePort: 80
    # - host: www.watershedmvp.org
    #   http:
    #     paths:
    #     - path: /
    #       backend:
    #         serviceName: wmvpsvc
    #         servicePort: 80
    - host: slrv.apps.capecodcommission.org
      http:
        paths:
        - path: /
          backend:
            serviceName: slrvsvc
            servicePort: 80
    - host: uat.slrv.apps.capecodcommission.org
      http:
        paths:
        - path: /
          backend:
            serviceName: slrvuatsvc
            servicePort: 80
    - host: dev.slrv.apps.capecodcommission.org
      http:
        paths:
        - path: /
          backend:
            serviceName: slrvdevsvc
            servicePort: 80

# # https://docs.cert-manager.io/en/latest/tutorials/acme/http-validation.html
# # CLUSTERISSUER = CLUSTER-SCOPED (ANY NAMESPACE)
# # YOU MUST DECIDE BETWEEN STAGING OR PRODUCTION WHEN ISSUING CERTS
# #  ---
# - apiVersion: certmanager.k8s.io/v1alpha1
#   kind: Certificate
#   metadata:
#     name: ccc-tls-secret
#     namespace: ccc
#   spec:
#     secretName: ccc-tls-secret
#     renewBefore: 360h #15 days
#     dnsNames:
#     - 'capecodcoast.org'
#     - 'www.capecodcoast.org'
#     - 'uat.capecodcoast.org'
#     - 'dev.capecodcoast.org'
    
#     - 'slrv.apps.capecodcommission.org'
#     - 'slrv.apps.capecodcommission.org/uat'
#     - 'slrv.apps.capecodcommission.org/dev'

#     - 'watershedmvp.org'
#     - 'www.watershedmvp.org'
#     - 'watershedmvp.org/uat'
#     - 'www.watershedmvp.org/uat'
#     - 'watershedmvp.org/dev'
#     - 'www.watershedmvp.org/dev'
#     issuerRef:
#       name: letsencrypt-prod
#       kind: ClusterIssuer
#     acme:
#       config:
#       - http01:
#           ingressClass: nginx
#         domains:
#         - 'capecodcoast.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#         - 'www.capecodcoast.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#         - 'uat.capecodcoast.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#         - 'dev.capecodcoast.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'slrv.apps.capecodcommission.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'slrv.apps.capecodcommission.org/uat'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'slrv.apps.capecodcommission.org/dev'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'watershedmvp.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'www.watershedmvp.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'uat.watershedmvp.org'
#       - http01:
#           ingressClass: nginx
#         domains:
#          - 'dev.watershedmvp.org'

kind: List
metadata: {}